# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Test app
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/github_actions

    steps:
      - uses: actions/checkout@v2
      - name: Detect Python version
        id: detect-python
        run: |
          echo "::set-output name=python-version::$(sed -r 's/^(python-)?(3\.[0-9]+)\.[0-9]+$/\2/' runtime.txt)"
      - name: Set up Python ${{ steps.detect-python.outputs.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.detect-python.outputs.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
        id: setup-python
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt -r requirements-dev.txt
      - uses: pre-commit/action@v2.0.3
        env:
          SKIP: mypy

  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
